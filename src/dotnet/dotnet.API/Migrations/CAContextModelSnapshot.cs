// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dotnet.API.Data;

#nullable disable

namespace dotnet.API.Migrations
{
    [DbContext(typeof(CAContext))]
    partial class CAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dotnet.Application.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("dotnet.Application.Models.Assisted", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("BirthDate")
                        .HasColumnType("text");

                    b.Property<string>("Father")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Mother")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ParentId");

                    b.ToTable("Assisteds");
                });

            modelBuilder.Entity("dotnet.Application.Models.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssistedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssistedId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("dotnet.Application.Models.Historic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssistedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InfoEntryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InfoExitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TypeInfo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssistedId");

                    b.HasIndex("InfoEntryId");

                    b.HasIndex("InfoExitId");

                    b.ToTable("Historics");
                });

            modelBuilder.Entity("dotnet.Application.Models.Info.InfoEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("FaceFrontPhoto")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<byte[]>("FaceLeftPhoto")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<byte[]>("FaceRightPhoto")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<string>("FinencialAssistence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("FullBodyPhoto")
                        .IsRequired()
                        .HasColumnType("BYTEA");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponsibleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SearchReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InfosEntry");
                });

            modelBuilder.Entity("dotnet.Application.Models.Info.InfoExit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isDropout")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("InfosExit");
                });

            modelBuilder.Entity("dotnet.Application.Models.Assisted", b =>
                {
                    b.HasOne("dotnet.Application.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet.Application.Models.Assisted", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Address");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("dotnet.Application.Models.Document", b =>
                {
                    b.HasOne("dotnet.Application.Models.Assisted", null)
                        .WithMany("Documents")
                        .HasForeignKey("AssistedId");
                });

            modelBuilder.Entity("dotnet.Application.Models.Historic", b =>
                {
                    b.HasOne("dotnet.Application.Models.Assisted", null)
                        .WithMany("Historics")
                        .HasForeignKey("AssistedId");

                    b.HasOne("dotnet.Application.Models.Info.InfoEntry", "InfoEntry")
                        .WithMany()
                        .HasForeignKey("InfoEntryId");

                    b.HasOne("dotnet.Application.Models.Info.InfoExit", "InfoExit")
                        .WithMany()
                        .HasForeignKey("InfoExitId");

                    b.Navigation("InfoEntry");

                    b.Navigation("InfoExit");
                });

            modelBuilder.Entity("dotnet.Application.Models.Assisted", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Historics");
                });
#pragma warning restore 612, 618
        }
    }
}
